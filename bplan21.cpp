/*
 *
 * Copyright ¬© 2023 DTU,
 * Author:
 * Christian Andersen jcan@dtu.dk
 *
 * The MIT License (MIT)  https://mit-license.org/
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the ‚ÄúSoftware‚Äù), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, publish, distribute,
 * sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
 * is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies
 * or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED ‚ÄúAS IS‚Äù, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE. */
// Â∏∏Áî®Êåá‰ª§cd local/svn/robobot/raubase/build
//  ./raubase
#include <string>
#include <string.h>
#include <math.h>
#include <unistd.h>
#include "mpose.h"
#include "steensy.h"
#include "uservice.h"
#include "sencoder.h"
#include "utime.h"
#include "cmotor.h"
#include "cservo.h"
#include "medge.h"
#include "cedge.h"
#include "cmixer.h"
#include "sdist.h"
#include <chrono>
#include <ctime>
#include <array>

#include "bplan21.h"

// #include <opencv2/opencv.hpp>
// #include <iostream>
// #include <vector>
// #include "golf.h"
#include "scam.h"

using std::chrono::seconds;
using std::chrono::system_clock;

// create class object
BPlan21 plan21;

void BPlan21::setup()
{ // ensure there is default values in ini-file
  if (not ini["plan21"].has("log"))
  { // no data yet, so generate some default values
    ini["plan21"]["log"] = "true";
    ini["plan21"]["run"] = "false";
    ini["plan21"]["print"] = "true";
  }
  // get values from ini-file
  toConsole = ini["plan21"]["print"] == "true";
  //
  if (ini["plan21"]["log"] == "true")
  { // open logfile
    std::string fn = service.logPath + "log_plan21.txt";
    logfile = fopen(fn.c_str(), "w");
    fprintf(logfile, "%% Mission plan21 logfile\n");
    fprintf(logfile, "%% 1 \tTime (sec)\n");
    fprintf(logfile, "%% 2 \tMission state\n");
    fprintf(logfile, "%% 3 \t%% Mission status (mostly for debug)\n");
  }
  setupDone = true;
}

BPlan21::~BPlan21()
{
  terminate();
}

void BPlan21::run()
{
  if (not setupDone)
    setup();
  if (ini["plan21"]["run"] == "false")
    return;
  //
  UTime t;
  bool finished = false;
  bool lost = false;
  // state = -10;
  // state = 11000;
  state = 11701;
  oldstate = state;
  const int MSL = 100;
  char s[MSL];
  //
  int lost_count = 0;
  toLog("Plan21   started");
  //
  int current_cross = 0;
  int detect_cross_count = 0;
  int axe = 0;
  int cross_for_qiaoqiaoban = 0;
  int detece_line_count = 0;
  float dist_fumen = 0.0;
  float dist_1 = 0.0;
  /**
   * state -10: ÂàùÂßãÁä∂ÊÄÅÔºå‰∏çÁî®ÂÖ≥ÂøÉ
   * state 0: Ë∑üÈöèÁ∫ø
   * state 1 Âà∞ 19: ÁºñÂÜôËá™Â∑±ÁöÑËøáÂ≤îË∑ØÈÄªËæëÔºåËøá‰∫ÜÂ≤îË∑Ø‰πãÂêéÔºåË¶Å‰πàËøõÂÖ•Ëá™Â∑±ÁöÑÁ≠ñÁï•ÁöÑ stateÔºåË¶Å‰πàÂõûÂà∞ state -1Ôºõ
   * state 20-29: Ë∑∑Ë∑∑ÊùøÔºåÁªìÊùüÂêéÂõûÂà∞ state -1
   * state 30-39: Èò∂Ê¢ØÔºåÁªìÊùüÂêéÂõûÂà∞ state -1
   * state 40-49: ÊñßÈó®ÔºåÁªìÊùüÂêéÂõûÂà∞ state -1
   * state 50-59: Â∞ÅÈó≠ËµõÈÅìÔºåÁªìÊùüÂêéÂõûÂà∞ state -1
   * state 6000-6999: ÁéØÂ≤õÔºåÁªìÊùüÂêéÂõûÂà∞ state -1
   * state 7000-7999: Â≤îË∑ØÂè£ÈÄªËæë
   * state 100-110: ÁªàÁÇπ üèÅ
   * state 999Ôºö‰∏¢Á∫øÔºåËø∑Ë∑Ø‰∫Ü
   *
   */

  // Ëé∑ÂèñÂàùÂßãÊó∂Èó¥ÁÇπ
  auto startTime = system_clock::now();
  auto endTime = system_clock::now();
  auto duration = endTime - startTime;

  // ÁéØÂ≤õÂ∞èËΩ¶ÁöÑÁä∂ÊÄÅ
  // 0 - Êú™Ê£ÄÊµãÂà∞Â∞èËΩ¶
  // 1 - Ê£ÄÊµãÂà∞Â∞èËΩ¶ÔºåÊ≠£Âú®Èù†Ëøë
  int thr_gate_small_car_state = 0;
  // int thr_gate_count_line = 0;
  pose.resetPose();
  ini["edge"]["kp"] = "45";
  ini["edge"]["maxturnrate"] = "8";
  ini["edge"]["lead"] = "0.3 0.2";

  while (not finished and not lost and not service.stop)
  { // run a square with 4 90 deg turns - CCV
    switch (state)
    {
    case -100:
      pose.dist = 0;
      pose.turned = 0;
      mixer.setVelocity(-0.3);
      mixer.setTurnrate(0);
      state = -1001;
      break;
    case -1001:
      if (pose.dist > 100) {
        lost = true;
      }
      break;
    case 9999:
      if (pose.turned <= 3.14)
      {
        mixer.setVelocity(0);
        mixer.setTurnrate(1);
      }
      else
      {
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
      }
      break;
    case -10: // wait for Regbot, then go forward
      // ini["edge"]["rate_ms"] = "4";
      // ini["edge"]["kp"]="35";
      // ini["edge"]["maxturnrate"]="7";
      // ini["edge"]["lead"]="0.3 0.15";
      pose.resetPose();
      toLog("finding line!!!!!!!!");
      mixer.setVelocity(0.2);
      mixer.setTurnrate(0);
      state = -9;
      break;
    case -9: // check if found the line
      if (medge.width > 0.02)
      {
        toLog("found!!!!");
        mixer.setVelocity(0.3);
        mixer.setTurnrate(0);
        mixer.setEdgeMode(true, 0.01);
        state = 0;
        pose.dist = 0;
        pose.turned = 0;
      }
      break;
    case 0: // check if find the crossroad
            // char edge_buffer[100];
            // sprintf(edge_buffer, " line width %f left edge %f right edge %f ", medge.width, medge.leftEdge, medge.rightEdge);
            // toLog(edge_buffer);
      mixer.setVelocity(0.3);
      mixer.setTurnrate(0);
      mixer.setEdgeMode(true, 0);
      // char pose_buffer[100];
      // sprintf(pose_buffer, "pose.dist %f pose.turned %f ", pose.dist, pose.turned);
      // toLog(pose_buffer);

      if (medge.width > 0.02 and medge.width < 0.03)
      {
        detect_cross_count = 0;
      }

      if (medge.width > 0.06)
      {
        detect_cross_count++;
        toLog("found crossroad");

        if (detect_cross_count > 5)
        {
          detect_cross_count = 0;
          pose.dist = 0;
          pose.turned = 0;
          current_cross++;

          if (current_cross == 1)
          {
            // Á¨¨‰∏Ä‰∏™Â≤îË∑ØÂè£ÔºåÂÖàÂéªÁéØÂ≤õ
            state = 6000;
            break;
          }
          else if (current_cross == 2)
          {
            // ÊñßÈó®
            state = 4000;
            break;
          }
          else if (current_cross == 3)
          {
            break;
          }
          else if (current_cross == 4)
          {
            // Â∞ÅÈó≠ÈößÈÅì
            state = 5000;
          }
          else if (current_cross == 5)
          {
            state = 6000;
          }
          break;
        }
      }

      if (medge.width == 0)
      {
        toLog("lost the line");
        if (lost_count > 10)
        {
          toLog("lost the line for too long");
          mixer.setVelocity(0.1);
          lost_count = 0;
          // lost = true;
        }
      }

      break;
    case 1:
      // toLog("turn crossroad 1: turn left");

      // // mixer.setDesiredHeading(-3.1415926/2);
      // char s1_pose_buffer[100];
      // sprintf(s1_pose_buffer, "pose.dist %f pose.turned %f ", pose.dist, pose.turned);
      // toLog(s1_pose_buffer);

      // true: turn left
      // mixer.setEdgeMode(true, 0);

      if (pose.turned >= 1.52)
      {
        toLog("back to state 0");
        pose.dist = 0;
        pose.turned = 0;
        // state = 0;
      }
      break;
    case 4000:
      pose.dist = 0;
      pose.turned = 0;
      mixer.setVelocity(0.1);
      mixer.setTurnrate(0);
      mixer.setEdgeMode(true, 0);
      state = 4001;
      break;
    case 4001:
      if (pose.dist >= 0.05)
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
        state = 4010;
      }
      break;
    case 4010:
      // ÊñßÈó®
      if (dist.dist[0] > 0.01 && dist.dist[0] < 0.4)
      {
        // mixer.setVelocity(0);
        // mixer.setTurnrate(0);
        state = 4015;
      }
      break;
    case 4015:
      dist_1 = dist.dist[0] - 0.2;
      dist_fumen = dist_1 < 0 ? 0 : dist_1;
      pose.dist = 0;
      pose.turned = 0;
      mixer.setVelocity(0.1);
      mixer.setTurnrate(0);
      mixer.setEdgeMode(true, 0);
      state = 4020;
      break;
    case 4020:
      if ((pose.dist >= dist_fumen and axe == 0))
      {
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
        state = 4100;
      }
      break;

    case 4100:

      if (dist.dist[0] < 0.3) // ÂèëÁé∞ÊñßÈó®
      {
        axe = 1;
      }

      if (axe == 1 and dist.dist[0] > 0.3) // ÊñßÈó®Ê∂àÂ§±
      {
        axe = 0;
        pose.dist = 0;
        pose.turned = 0;
        state = 5000; // ËøõÂÖ•Â∞ÅÈó≠ÈößÈÅìÁä∂ÊÄÅ
      }

      break;
    /**********************************************************************************
     *
     *
     * Â∞ÅÈó≠ËµõÈÅì
     *
     *
     ***********************************************************************************/
    case 5000:
      // ËøõÂÖ•Â∞ÅÈó≠ËµõÈÅìÂå∫Âüü
      pose.dist = 0;
      pose.turned = 0;
      state = 5100;
      break;

    case 5100:
      // Â∞ÅÈó≠ËµõÈÅì
      if (pose.dist < 0.82) // 3.31 zys‰ªé0.7ÊîπÊàê‰∫Ü0.4Ë∞ÉËØï   myx 0.35-0.3
      {
        mixer.setTurnrate(0);
        mixer.setVelocity(0.4);
        mixer.setEdgeMode(true, 0);
      }
      else
      {
        pose.dist = 0;
        pose.turned = 0;
        state = 5200;
      }
      break; // ÂêëÂâçËµ∞xÁ±≥

    case 5200:
      if (pose.turned < 3.14 / 4) // ËΩ¨Âêë 45Â∫¶ ÂáÜÂ§áÈù†ËøëÂ∞ÅÈó≠ÈößÈÅì‰æßÈù¢
      {
        mixer.setTurnrate(3.14 / 4); // ËΩ¨Âêë45¬∞
        mixer.setVelocity(0);
      }
      else // ÁÑ∂Âêé‰øùÊåÅ0.1m/sÁõ¥Ë°åÂπ∂ÂàáÊç¢Âà∞‰∏ã‰∏Ä‰∏™Áä∂ÊÄÅ
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setTurnrate(0);
        mixer.setVelocity(0.1);
        state = 5300;
      }
      break;

    case 5300:
      mixer.setTurnrate(0);
      mixer.setVelocity(0.2);
      if (dist.dist[0] < 0.13) // ÂèëÁé∞Â∞ÅÈó≠ËµõÈÅì‰æßÈù¢     myx 0.2Êîπ‰∏∫0.15ÊµãËØï
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setTurnrate(-3.14 / 2);
        mixer.setVelocity(0.1);
        state = 5400;
      }
      break;

    case 5400:
      if (pose.turned < -3.14 / 2) // ËΩ¨Ëøá‰∫Ü90Â∫¶ÔºåÂáÜÂ§áÊé®Èó®ËøõÂÖ•ÈößÈÅì
      {
        pose.dist = 0;
        pose.turned = 0;
        state = 5500;
      }
      break;

    case 5410:
      if (dist.dist[0] < 0.2) // Èù†ËøëÈó®
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setTurnrate(0);
        mixer.setVelocity(0.1);
        state = 5500;
      }
      break;

    case 5500:
      mixer.setVelocity(0.75); // 0.5-2Ë∞ÉËØï
      mixer.setTurnrate(0);
      // state = 5600;
      if (pose.dist > 0.25)
      {
        pose.dist = 0;
        pose.turned = 0;
        state = 5510;
      }
      break;

    case 5510:
      mixer.setVelocity(0.2); // 0.1-0.2Ë∞ÉËØï
      mixer.setTurnrate(0);
      if (pose.dist > 0.05)
      {
        pose.dist = 0;
        pose.turned = 0;
        state = 5610;
      }
      break;

      // ÊääÈößÈÅìÈó®Êé®ÂºÄÂêéÔºå‰∏§Ê¨°Â∑¶ËΩ¨90Â∫¶ÔºåÂ∑°Á∫øÔºåËøõÂÖ•ÈößÈÅì
    case 5610:
      if (pose.dist < 0.05)
      {
        mixer.setVelocity(0.1);
      }
      else
      {
        mixer.setVelocity(0);
        mixer.setTurnrate(1); // ÂºÄÂßãÂ∑¶ËΩ¨
        pose.dist = 0;        // ÈáçÁΩÆË∑ùÁ¶ªËÆ°ÁÆó
        pose.turned = 0;      // ÈáçË¶ÅÔºö‰πüÈúÄË¶ÅÈáçÁΩÆËΩ¨ÂêëËßíÂ∫¶ÁöÑÁ¥ØËÆ°
        state = 5620;
      }
      break;

    case 5620: // ÂÆåÊàêÂ∑¶ËΩ¨90Â∫¶ÁÑ∂ÂêéÁõ¥Ëµ∞
      if (pose.turned < 3.14 / 2)
      {
        // Á≠âÂæÖËΩ¨Êª°90Â∫¶
      }
      else
      {
        mixer.setTurnrate(0);
        mixer.setVelocity(0.3); // ÂºÄÂßãÁõ¥Ë°å
        pose.dist = 0;          // ÈáçÁΩÆË∑ùÁ¶ªËÆ°ÁÆóÔºå‰∏∫‰∏ã‰∏ÄÊ≠•Áõ¥Ë°åÂÅöÂáÜÂ§á
        pose.turned = 0;        // ÈáçË¶ÅÔºöÈáçÁΩÆËΩ¨ÂêëËßíÂ∫¶ÁöÑÁ¥ØËÆ°
        state = 5625;
      }
      break;

    case 5625: // Áõ¥Ëµ∞0.4mÁÑ∂ÂêéÂ∑¶ËΩ¨

      if (medge.width > 0.02)
      {
        cross_for_qiaoqiaoban++;
      }
      if (cross_for_qiaoqiaoban >= 2)
      {
        toLog("found line for qiaoqiaoban then turn 90 du");
        pose.dist = 0;
        pose.turned = 0;
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
        cross_for_qiaoqiaoban = 0;
        state = 5627;
      }
      break;

    case 5627:

      if (pose.dist < 0.07)
      {
        mixer.setTurnrate(0);
        mixer.setVelocity(0.1);
      }
      else
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
        state = 5630;
      }
      break;

    case 5630: // Â∑¶ËΩ¨90Â∫¶ ÁÑ∂ÂêéÂ∑°Á∫øÁõ¥Ë°å
      if (pose.turned < 3.1 / 2)
      {
        mixer.setTurnrate(1);
        mixer.setVelocity(0);
        // Á≠âÂæÖËΩ¨Êª°90Â∫¶
      }
      else
      {
        mixer.setTurnrate(0); // ÂÅúÊ≠¢ËΩ¨Âêë
        mixer.setVelocity(0); // ÂÅúÊ≠¢Áõ¥Ë°åÔºåÂáÜÂ§áÂºÄÂßãÂ∑°Á∫ø
        pose.dist = 0;        // ÈáçÁΩÆË∑ùÁ¶ªËÆ°ÁÆóÔºå‰∏∫‰∏ã‰∏ÄÊ≠•Áõ¥Ë°åÂÅöÂáÜÂ§á
        pose.turned = 0;      // ÈáçË¶ÅÔºöÈáçÁΩÆËΩ¨ÂêëËßíÂ∫¶ÁöÑÁ¥ØËÆ°
        state = 8000;         // ÂºïÂÖ•Êñ∞Áä∂ÊÄÅ‰ª•ÂàÜÁ¶ªËΩ¨ÂêëÂÆåÊàê‰∏éÂºÄÂßãÂ∑°Á∫øÁõ¥Ë°åÁöÑÈÄªËæë
      }
      break;

      /**********************************************************************************
       *
       *
       * ËµõÈ©¨Âú∫
       *
       *
       ***********************************************************************************/

    case 8000:
      mixer.setTurnrate(0);
      // pose.dist = 0;
      // pose.turned = 0;
      if (pose.dist < 3.7) // ÈößÈÅìÂà∞ËµõÈ©¨Âú∫Ëµ∑ÁÇπË∑ùÁ¶ª2.5
      {

        mixer.setVelocity(0.3);
        mixer.setTurnrate(0);
        mixer.setEdgeMode(true, 0);
      }
      else
      {
        pose.dist = 0;
        pose.turned = 0;
        state = 8100;
      }
      break;

    case 8100: // ËµõÈ©¨Âú∫Èó®ÂêéËΩ¨Âêë
      if (pose.turned < 3.15)
      {
        mixer.setVelocity(0);
        mixer.setTurnrate(1);
      }
      else
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setTurnrate(0);
        state = 8120;
      }
      break;

    case 8120: // ÂØªËøπÊâæÂà∞ÊñπÂêë
      ini["edge"]["kp"] = "45";
      ini["edge"]["maxturnrate"] = "12";
      ini["edge"]["lead"] = "0.3 0.2";
      if (pose.dist < 0.5)
      {
        mixer.setTurnrate(0);
        mixer.setVelocity(0.3);
        mixer.setEdgeMode(true, 0.012);
      }
      else
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setTurnrate(0);
        mixer.setVelocity(0.3);
        mixer.setEdgeMode(true, 0.012);
        state = 8130;
      }
      break;
    case 8130: // Áõ¥Á∫øÂÜ≤Âà∫
      if (pose.dist > 4.7)
      {
        ini["edge"]["kp"] = "45";
        ini["edge"]["maxturnrate"] = "12";
        ini["edge"]["lead"] = "0.3 0.2";
        pose.dist = 0;
        pose.turned = 0;
        mixer.setTurnrate(0);
        mixer.setVelocity(0.3);
        mixer.setEdgeMode(true, 0.01);
        state = 8140;
        break;
      }
      break;

    case 8140: // Á¨¨‰∏Ä‰∏™ËΩ¨ÂºØ
      // char edge_buffer[100];
      // sprintf(edge_buffer, " line width %f pose.turned %f ", medge.width, pose.turned);
      // toLog(edge_buffer);
      if (pose.dist > 1.8)
      {
        pose.dist = 0;
        pose.turned = 0;
        state = 8150;
      }
      break;
    case 8150: // Áõ¥Á∫øÂÜ≤Âà∫ 2
      ini["edge"]["kp"] = "5";
      ini["edge"]["maxturnrate"] = "0.5";
      ini["edge"]["lead"] = "0.3 0.01";
      if (pose.dist < 1.2)
      {
        mixer.setTurnrate(0);
        mixer.setVelocity(0.7);
        mixer.setEdgeMode(true, 0.012);
      }
      else
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setTurnrate(0);
        mixer.setVelocity(0.3);
        mixer.setEdgeMode(true, 0.012);
        state = 8160;
      }
      break;

    case 8160: // Á¨¨‰∫å‰∏™ËΩ¨ÂºØ
      ini["edge"]["kp"] = "45";
      ini["edge"]["maxturnrate"] = "12";
      ini["edge"]["lead"] = "0.3 0.2";
      // char edge_buffer_1[100];
      // sprintf(edge_buffer_1, " line width %f pose.turned %f pose.dist %f", medge.width, pose.turned, pose.dist);
      // toLog(edge_buffer_1);
      if (pose.dist > 1.1 && pose.turned < -3 / 2)
      {
        pose.dist = 0;
        pose.turned = 0;
        state = 8170;
      }
      break;

    case 8170: // ËΩ¨ÂºØÂêéÁªßÁª≠Ëµ∞ÔºåÁõ¥Âà∞Á©øËøáÈó®
      pose.dist = 0;
      pose.turned = 0;
      mixer.setVelocity(0.2);
      mixer.setTurnrate(0);
      mixer.setEdgeMode(true, 0.012);
      state = 8175;
      break;
    case 8175:
      // Ëøá‰∫ÜÁªàÁÇπÁ∫ø
      if (dist.dist[1] > 0.03 and dist.dist[1] < 0.3)
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setTurnrate(0);
        mixer.setVelocity(0);
        state = 11000;
      }
      break;

    // // ÂéüÂßãÁâàÊú¨ÈÄöËøáÁªàÁÇπÂêé
    // case 8180:
    //   if (pose.dist > 0.3)
    //   {
    //     pose.dist = 0;
    //     pose.turned = 0;
    //     mixer.setTurnrate(0);
    //     mixer.setVelocity(0);
    //     state = 8190;
    //   }
    //   break;

    // case 8190:
    //   mixer.setVelocity(0.15);
    //   mixer.setTurnrate(0);
    //   if (medge.width > 0.05)
    //   {
    //     cross_for_qiaoqiaoban++;
    //   }
    //   if (cross_for_qiaoqiaoban >= 2)
    //   {
    //     pose.dist = 0;
    //     pose.turned = 0;
    //     cross_for_qiaoqiaoban = 0;
    //     state = 8200;
    //   }

    //   break;

    // case 8200:
    //   if (pose.dist < 0.07)
    //   {
    //     mixer.setTurnrate(0);
    //     mixer.setVelocity(0.1);
    //   }
    //   else
    //   {
    //     pose.dist = 0;
    //     pose.turned = 0;
    //     state = 8300;
    //   }
    //   break;

    // case 8300:
    //   if (pose.turned < 3.15 / 2)
    //   {
    //     mixer.setTurnrate(3.15 / 2);
    //     mixer.setVelocity(0);
    //   }
    //   else
    //   {
    //     pose.dist = 0;
    //     pose.turned = 0;
    //     state = 9000;
    //   }
      // break;

    /***********************************************************************************
     *
     * ÂÖ≥Èó®
     *
     ***********************************************************************************/
    case 11000:
      // ÊéâÂ§¥
      if (pose.turned < 3.15)
      {
        mixer.setVelocity(0);
        mixer.setTurnrate(1);
      }
      else
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setTurnrate(0);
        mixer.setVelocity(0.2);
        mixer.setEdgeMode(false, -0.012); // ÊéâÂ§¥‰πãÂêéÂ∫îËØ•ÂêëÂè≥Â∑°Á∫ø
        state = 11100;
      }
      break;
    case 11100:
      // ÊéâÂ§¥ÊàêÂäü
      pose.dist = 0;
      pose.turned = 0;
      mixer.setTurnrate(0);
      mixer.setVelocity(0.2);
      mixer.setEdgeMode(false, -0.012);
      // state = 11200;
      state = 11150; // ÊµãËØïÊó∂ÂÄôÂÖàÊ≥®Èáä
      break;
    case 11150:
      if (pose.dist > 3) {
        pose.dist = 0;
        pose.turned = 0;
        state = 11200;
      }
      break;
    // // ÊµãËØïÈÄªËæë
    // case 11151:
    //     pose.dist = 0;
    //     pose.turned = 0;
    //     mixer.setTurnrate(0);
    //     mixer.setVelocity(0.3);
    //     mixer.setEdgeMode(false, -0.012); // ÊéâÂ§¥‰πãÂêéÂ∫îËØ•ÂêëÂè≥Â∑°Á∫ø
    //     state = 11200;
    //     break;
    case 11200:
      // ÂΩì‰æßÈù¢‰º†ÊÑüÂô®Ê£ÄÊµãÂà∞‰∏úË•øÁöÑÊó∂ÂÄôÔºåËØ¥ÊòéÂà∞‰∫ÜÈößÈÅì
      // Ê£ÄÊµãÂà∞ÈößÈÅì‰πãÂêéÔºåÂêéÈÄÄÂá∫ÈößÈÅìÔºåÂ∑¶ËΩ¨ÂÖàÂÖ≥ÂâçÈó®ÔºåÂÜçËΩ¨ÂõûÂéªÂÖ≥ÂêéÈó®
      if(dist.dist[1] < 0.25 and dist.dist[1] > 0.02)
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setTurnrate(0);
        mixer.setVelocity(-0.2);
        state = 11250;
        break;
      } else {
        mixer.setTurnrate(0);
        mixer.setVelocity(0.2);
        mixer.setEdgeMode(false, -0.012); // ÊéâÂ§¥‰πãÂêéÂ∫îËØ•ÂêëÂè≥Â∑°Á∫ø
        break;
      }
      break;
    case 11250:
      if (pose.dist < -0.15)
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setTurnrate(1);
        mixer.setVelocity(0);
        state = 11300;
      } else {
        mixer.setTurnrate(0);
        mixer.setVelocity(-0.2);
      }
      break;
    case 11300:
      if (pose.turned > 1.5)
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setTurnrate(0);
        mixer.setVelocity(0.2);
        state = 11350;
      } else {
        mixer.setTurnrate(1);
        mixer.setVelocity(0);
      }
      break;
    case 11350:
      if (pose.dist > 0.45)
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setTurnrate(-1);
        mixer.setVelocity(0);
        state = 11400;
      } else {
        mixer.setTurnrate(0);
        mixer.setVelocity(0.2);
      }
      break;
    case 11400:
      if (pose.turned < -1.45)
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setTurnrate(0);
        mixer.setVelocity(0.2);
        state = 11500;
      } else {
        mixer.setTurnrate(-1);
        mixer.setVelocity(0);
      }
      break;
      // Â∑¶ËΩ¨Êó∂Ê≠£ÂÄº
    case 11500:
      if (pose.dist > 1.3)
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setTurnrate(1);
        mixer.setVelocity(0);
        state = 11550;
      } else {
        mixer.setTurnrate(0);
        mixer.setVelocity(0.2);
      }
      break;
    case 11550:
      // ÂÄíÁùÄÂÖ≥Èó®
      if (pose.turned > 1.5)
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setTurnrate(0);
        mixer.setVelocity(-0.2);
        state = 11600;
      } else {
        mixer.setTurnrate(1);
        mixer.setVelocity(0);
      }
      break;
    case 11600:
      if (medge.width > 0.03)
      {
        detece_line_count++;
      }
      if (detece_line_count > 5) {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setTurnrate(0);
        mixer.setVelocity(0.2);
        detece_line_count = 0;
        state = 11605;
      }else {
        mixer.setTurnrate(0);
        mixer.setVelocity(-0.2);
      }
      break;
    case 11605:
      // ÁªßÁª≠ÂæÄÂêé‰∏ÄÁÇπÁÇπËΩ¨Âêë
      if(pose.dist > 0.07) // wait
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setTurnrate(-1);
        mixer.setVelocity(0);
        state = 11650;
      }
      break;
    case 11650:
      // ÊâæÂà∞ÁôΩÁ∫øËΩ¨Âêë‰πãÂêéÂâçËµ∞Â∑°Á∫ø‰øÆÊ≠£‰∏Ä‰∏ãË∑ùÁ¶ª
      if (pose.turned < -1.57)
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setTurnrate(0);
        mixer.setVelocity(0.2);
        mixer.setEdgeMode(false, -0.012);
        state = 11655;
      } else {
        mixer.setTurnrate(-1);
        mixer.setVelocity(0);
      }
      break;
    case 11655:
      if(pose.dist > 0.2)
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setTurnrate(0);
        mixer.setVelocity(-0.1);
        state = 11700;
      } else {
        mixer.setTurnrate(0);
        mixer.setVelocity(0.2);
        mixer.setEdgeMode(false, -0.012);
      }
      break;
    case 11700:
      // ÂÄíËΩ¶ÊääÈó®ÂÖ≥Â•Ω
      // ÁÑ∂ÂêéÂæÄÂâç‰∏ÄÁÇπÁÇπÂè≥ËΩ¨ÂÖ≥ÂêéÈó®
      if (pose.dist < -0.5)
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setTurnrate(0);
        mixer.setVelocity(0.2);
        mixer.setEdgeMode(false, -0.012);
        state = 11750;
      } else {
        mixer.setTurnrate(0);
        mixer.setVelocity(-0.1);
      }
      break;
    // ÊµãËØïÂçïÁã¨ÂÖ≥ÂêéÈó®ÁöÑÈÄªËæë
    case 11701:
      pose.dist = 0;
      pose.turned = 0;
      mixer.setTurnrate(0);
      mixer.setVelocity(0.2);
      mixer.setEdgeMode(false, -0.012);
      state = 11750;
      break;
    case 11750:
      // Â∑°Á∫øÂæÄÂâç‰∏ÄÁÇπÁÇπÔºåÂÅö‰øÆÊ≠£
      if (pose.dist > 0.2)
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setVelocity(0);
        mixer.setTurnrate(-1);
        state = 11800;
      } else {
        mixer.setTurnrate(0);
        mixer.setVelocity(0.2);
        mixer.setEdgeMode(false, -0.012);
      }
      break;
    case 11800:
      // Âè≥ËΩ¨ÂáÜÂ§áÂÖ≥ÂêéÈó®
      if (pose.turned < -1.5)
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setTurnrate(0);
        mixer.setVelocity(0.2);
        state = 11850;
      } else {
        mixer.setVelocity(0);
        mixer.setTurnrate(-1);
      }
      break;
    case 11850:
      if (pose.dist > 0.43) {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setVelocity(0);
        mixer.setTurnrate(-1);
        state = 11900;
      } else {
        mixer.setTurnrate(0);
        mixer.setVelocity(0.2);
      }
      break;
    case 11900:
      if (pose.turned < -1.5)
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setTurnrate(0);
        mixer.setVelocity(0.2);
        state = 11950;
      } else {
        mixer.setVelocity(0);
        mixer.setTurnrate(-1);
      }
      break;
    case 11950:
      if (pose.dist > 1.25)
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setTurnrate(1);
        mixer.setVelocity(0);
        state = 12000;
      } else {
        mixer.setTurnrate(0);
        mixer.setVelocity(0.2);
      }
      break;
    case 12000:
      if (pose.turned > 1.57)
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setTurnrate(0);
        mixer.setVelocity(-0.2);
        state = 12050;
      } else {
        mixer.setTurnrate(1);
        mixer.setVelocity(0);
      }
      break;
    case 12050:
      if (medge.width > 0.03)
      {
        detece_line_count++;
      }

      if (detece_line_count > 5) {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setTurnrate(0);
        mixer.setVelocity(0.2);
        detece_line_count = 0;
        state = 12055;
      } else {
        mixer.setTurnrate(0);
        mixer.setVelocity(-0.2);
      }
      break;
    case 12055:
      if(pose.dist > 0.05)
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setTurnrate(-1);
        mixer.setVelocity(0);
        state = 12100;
      }
      break;
    case 12100:
      // ÊâæÂà∞ÁôΩÁ∫øËΩ¨Âêë‰πãÂêéÂâçËµ∞Â∑°Á∫ø‰øÆÊ≠£‰∏Ä‰∏ãË∑ùÁ¶ª
      if (pose.turned < -1.57) // wait
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setTurnrate(0);
        mixer.setVelocity(0.2);
        mixer.setEdgeMode(false, 0);
        state = 12150;
      } else {
        mixer.setTurnrate(-1);
        mixer.setVelocity(0);
      }
      break;
    case 12150:
      // ÂæÄÂâçÂ∑°Á∫øÔºåÊâæÂà∞Â≤îË∑ØÂè£
      if (medge.width > 0.07)
      {
        detece_line_count++;
      }

      if (detece_line_count > 5) {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setTurnrate(0);
        mixer.setVelocity(-0.1);
        state = 12200;
      }
      break;
    case 12200:
      // ÂÄíËΩ¶ÊääÈó®ÂÖ≥Â•Ω
      // ÂÖ≥Èó®ÁªìÊùüÔºåÂ∑°Á∫øÂà∞ÁªàÁÇπ
      if (pose.dist < -0.6) {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setTurnrate(0);
        mixer.setVelocity(0.2);
        mixer.setEdgeMode(true, 0.01);
        state = 12250;
      } else {
        mixer.setTurnrate(0);
        mixer.setVelocity(-0.1);
      }
      break;
    case 12250:
      // ÂÜçÊ¨°ËøáÁªàÁÇπÁ∫ø
      if (pose.turned  < 3.0 and dist.dist[1] > 0.03 and dist.dist[1] < 0.2)
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setTurnrate(0);
        mixer.setVelocity(0.1);
        mixer.setEdgeMode(true, 0.01);
        state = 12300;
      } else {
        mixer.setTurnrate(0);
        mixer.setVelocity(0.2);
        mixer.setEdgeMode(true, 0.01);
      }
      break;
    case 12300:
      // Ëøá‰∫ÜÁªàÁÇπÁ∫ø
      if (pose.dist > 0.1)
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setTurnrate(0);
        mixer.setVelocity(0.1);
        state = 12350;
      }
      break;
    case 12350:
      mixer.setVelocity(0.1);
      mixer.setTurnrate(0);
      if (medge.width > 0.05)
      {
        cross_for_qiaoqiaoban++;
      }
      if (cross_for_qiaoqiaoban >= 2)
      {
        pose.dist = 0;
        pose.turned = 0;
        cross_for_qiaoqiaoban = 0;
        state = 12400;
      }
      break;
    case 12400:
      if (pose.dist < 0.07)
      {
        mixer.setTurnrate(0);
        mixer.setVelocity(0.1);
      }
      else
      {
        pose.dist = 0;
        pose.turned = 0;
        state = 12450;
      }
      break;
    case 12450:
      if (pose.turned < 3.15 / 2)
      {
        mixer.setTurnrate(3.15 / 2);
        mixer.setVelocity(0);
      }
      else
      {
        pose.dist = 0;
        pose.turned = 0;
        state = 9000;
      }
      break;
    /****************************************
     *
     * ËµõÈÅìÁªìÊùü
     *
    *****************************************/



    /**********************************************************************************
     *
     *
     * ÁéØÂ≤õ
     *
     *
     ***********************************************************************************/
    case 6000:
      // ÂæÄÂ∑¶‰æßÂØªËøπÂâçËøõ
      pose.dist = 0;
      pose.turned = 0;
      mixer.setEdgeMode(true, 0);
      state = 6100;
      break;

    case 6100:
      // Áõ¥Âà∞ËΩ¨Ëøá‰∫ÜÂºØÂπ∂‰∏îÂ∞èËΩ¶Âà∞ËææÂêàÈÄÇ‰ΩçÁΩÆ
      // if (pose.turned > 1.5 && pose.dist > 1) {
      if (pose.turned > 3 / 2)
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
        state = 6110;
      }
      break;
    case 6110:
      if (pose.dist < 0.58)
      {
        mixer.setTurnrate(0);
        mixer.setVelocity(0.2);
        mixer.setEdgeMode(true, 0);
      }
      else
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
        state = 6200;
      }
      break;

    case 6200:
      // Á≠âÂæÖÂ∞èËΩ¶ÁªèËøáÁÑ∂ÂêéÁªßÁª≠ÂâçËøõ
      if (dist.dist[1] < 0.3 && thr_gate_small_car_state == 0)
      {
        thr_gate_small_car_state = 1;
      }

      // ËÆ©Â∞èËΩ¶Ëµ∞ËøáÂéª
      if (thr_gate_small_car_state)
      {
        thr_gate_small_car_state = 0;
        state = 6210;
      }
      break;

    case 6210:
      pose.dist = 0;
      pose.turned = 0;
      mixer.setVelocity(0);
      mixer.setTurnrate(0);
      // mixer.setEdgeMode(true, 0);
      state = 6211;
      break;

    // ÁªßÁª≠Âæ™ËøπÂâçËøõ
    case 6211:
      if (pose.dist < 0.98)
      { // 0.98
        mixer.setVelocity(0.2);
        mixer.setTurnrate(0);
        mixer.setEdgeMode(true, 0);
      }
      else
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
        state = 6320;
      }
      break;
    case 6320:
      // ËΩ¶Â∞æÂØπÂáÜÁéØÂ≤õÂàáÁ∫ø
      if (pose.turned > -3.14 * 1 / 2)
      {
        pose.dist = 0;
        mixer.setTurnrate(-3.14 * 1 / 3);
        mixer.setVelocity(-0.15);
      }
      else
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
        state = 6400;
      }
      break;
    case 6400:
      // ÂÄíËΩ¶ÂÜ≤‰∏äÂéª
      pose.dist = 0;
      pose.turned = 0;
      mixer.setTurnrate(0);
      mixer.setVelocity(-0.35);
      state = 6410;
      break;
    case 6410:
      // ÁôªÈôÜÁéØÂ≤õ  -1.01 -0.73
      if (pose.dist < -0.53)
      {
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
        state = 6420;
      }
      break;
    case 6420:
      // Ë∞ÉÊï¥Â∞èËΩ¶ÂßøÊÄÅ
      pose.dist = 0;
      pose.turned = 0;
      mixer.setVelocity(0);  // 0.26
      mixer.setTurnrate(-2); // -4.5
      state = 6430;
      break;
    case 6430:
      // Ë∞ÉÊï¥ÂÆåÊàêÔºåÂáÜÂ§áÁªïË°å
      if (pose.turned < -3.14 / 2)
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
        state = 6500;
      }
      break;
    case 6500:
      // ÁéØÂ≤õÁªïË°å
      pose.dist = 0;
      pose.turned = 0;
      mixer.setTurnrate(-0.85);
      mixer.setVelocity(0.3); // 0.3
      state = 6600;
      break;

    case 6600:
      // ÁéØÂ≤õÂë®Èïø 2.2m
      // ÁªïË°å‰∏ÄÂúà‰πãÂêéÔºåÁõ¥Á∫øÂâçËøõÂà∞ÁéØÂ≤õËæπÁºò
      if (pose.turned < -3.16 * 2)
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setTurnrate(0);
        mixer.setVelocity(0);
        pose.resetPose();
        state = 6700;
      }
      break;
    case 6700:
      // Ë∞ÉÊï¥ÂßøÊÄÅÔºåÈù¢ÂêëÂ§ñÂúà
      pose.dist = 0;
      pose.turned = 0;
      mixer.setVelocity(0);
      mixer.setTurnrate(3.14 / 2);
      state = 6710;
      break;
    case 6710:
      // Ë∞ÉÊï¥ÂßøÊÄÅÔºåÈù¢ÂêëÂ§ñÂúà
      // ÁÑ∂ÂêéÂÅú‰∏ãÊù•Á≠âÂ∞èËΩ¶ÁªèËøá
      if (pose.turned > 1.42)
      { // 1.3
        pose.dist = 0;
        pose.turned = 0;
        mixer.setTurnrate(0);
        mixer.setVelocity(0);
        pose.resetPose();
        state = 6720;
      }
      break;
    case 6720:
      // Ê£ÄÊµãÂà∞Â∞èËΩ¶ÁªèËøá
      if (dist.dist[0] < 0.4 && thr_gate_small_car_state == 0)
      {
        thr_gate_small_car_state = 1;
        startTime = system_clock::now();
      }

      endTime = system_clock::now();
      duration = endTime - startTime;

      // Èó¥Èöî1ÁßíÔºåËÆ©Â∞èËΩ¶ËøáÂéª
      if (thr_gate_small_car_state && duration >= seconds(1))
      {
        thr_gate_small_car_state = 0;
        pose.dist = 0;
        pose.turned = 0;
        mixer.setTurnrate(0);
        mixer.setVelocity(0.2);
        state = 6721;
      }
      break;

    /**********************************************************************************
     *
     *
     * ÁªïÂ§ñÁéØÂ≤õ
     *
     *
     ***********************************************************************************/
    case 6721:
      // ÊâæÂà∞ÁôΩÁ∫øÂ∞±Âè≥ËΩ¨ 90Â∫¶ÂáÜÂ§áÁªïÂ§ñÁéØÂ≤õ
      mixer.setTurnrate(0);
      mixer.setVelocity(0.2);

      if (medge.width > 0.03)
      {
        cross_for_qiaoqiaoban++;
      }

      if (cross_for_qiaoqiaoban >= 5)
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
        cross_for_qiaoqiaoban = 0;
        state = 6730;
      }
      break;

    case 6730:
      // ÂâçËøõ‰∏ÄÁÇπÁÇπËΩ¨ÂºØ
      if (pose.dist < 0.07)
      {
        mixer.setTurnrate(0);
        mixer.setVelocity(0.1);
      }
      else
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
        state = 6740;
      }
      break;

    case 6740:
      if (pose.turned > -2.98 / 2)
      {
        mixer.setTurnrate(-1.5);
        mixer.setVelocity(0);
      }
      else
      {
        pose.dist = 0;
        pose.turned = 0;
        state = 6750;
      }
      break;

    case 6750:
      mixer.setVelocity(0.25);
      mixer.setTurnrate(0);
      mixer.setEdgeMode(true, 0);
      // mixer.setEdgeMode(false, 0.01);

      if (pose.turned < -3)
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
        state = 6760;
      }

      if (dist.dist[0] < 0.15)
      {
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
      }

      break;

    case 6760:

      mixer.setVelocity(0.25);
      mixer.setTurnrate(0);
      mixer.setEdgeMode(true, 0);

      if (pose.turned < -3 / 2)
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
        state = 6800;
      }

      if (dist.dist[0] < 0.15)
      {
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
      }

      break;

    case 6800:

      mixer.setVelocity(0.25);
      mixer.setTurnrate(0);
      mixer.setEdgeMode(true, 0);

      if (dist.dist[0] < 0.15)
      {
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
      }

      if (pose.dist > 0.95)
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
        state = 6810;
      }
      break;

    case 6810:
      mixer.setVelocity(0);
      mixer.setTurnrate(1);
      if (pose.turned > 3.14 / 4)
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
        state = 6820;
      }
      break;

    case 6820:
      mixer.setVelocity(0.1);
      mixer.setTurnrate(0);

      if (medge.width > 0.07)
      {
        cross_for_qiaoqiaoban++;
      }

      if (cross_for_qiaoqiaoban >= 3)
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
        cross_for_qiaoqiaoban = 0;
        state = 6830;
      }

      break;

    case 6830:
      if (pose.dist < 0.06)
      {
        mixer.setTurnrate(0);
        mixer.setVelocity(0.1);
      }
      else
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
        state = 6840;
      }
      break;

    case 6840:

      mixer.setVelocity(0);
      mixer.setTurnrate(1);
      if (pose.turned > 3.14 / 2)
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setTurnrate(0);
        mixer.setVelocity(0);
        state = 4000;
      }
      break;
    /**
     * Á¨¨‰∏Ä‰∏™Ë∑ØÂè£ÈÄªËæë
     * ‰ªéÁéØÂ≤õÂá∫Êù•ÂêéÔºå‰ºöÂÜçÊ¨°ÁªèËøáÁ¨¨‰∏Ä‰∏™Ë∑ØÂè£ÔºåÊ≠§Êó∂ÊñπÂêëÊòØÂèçÁöÑÔºåË¶ÅË∞ÉÊï¥ÂõûÈ¢ÑÊúüÁöÑÊñπÂêëÔºàËµ∞ÊúÄÂ§ñÂúàÔºâ
     * 1. ÂêéÈÄÄ 0.2m ÁÑ∂ÂêéÂ∑¶ËΩ¨90Â∫¶
     * 2. Áõ¥Êé•Á©øËøáÂ≤îË∑ØÂè£
     * 3. Áî®ÊÖ¢ÈÄüÂØªËøπÊ®°ÂºèËµ∞‰∏ÄÁÇπÔºàÂõ†‰∏∫Ê≠§Êó∂ÁöÑÂÅèÁßªÂæàÂ§ßÔºåÈÄüÂ∫¶Â§™Âø´ÂÆπÊòìÂÅèÔºâ
     * 4. Á≠âÂØªËøπÁ®≥ÂÆö‰πãÂêéÂä†ÈÄüÔºåÂõûÂà∞ÂàùÂßãÁä∂ÊÄÅ
     * 5. ÁªìÊùü
     */
    case 7000:
      // ÂêéÈÄÄ 20cm Áõ¥Êé•Á©øËøáÂ≤îË∑Ø
      pose.dist = 0;
      pose.turned = 0;
      mixer.setTurnrate(0);
      mixer.setVelocity(-0.3);
      state = 7100;
      break;
    case 7100:
      // ÂêéÈÄÄ‰∫ÜÔºåËΩ¨Âêë
      if (pose.dist < -0.2)
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setTurnrate(3.14 / 2);
        mixer.setVelocity(0.1);
        state = 7200;
      }
      break;
    case 7200:

      // ËΩ¨ÂêëÂêéÔºåÁõ¥Êé•Á©øËøáÂ≤îË∑ØÂè£
      if (pose.turned > 1.2)
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setTurnrate(0);
        mixer.setVelocity(0.3);
        state = 7300;
      }
      break;
    case 7300:
      // ÊâæÂà∞ÁôΩÁ∫øÔºåËØ¥ÊòéÂ∑≤ÁªèÁ©øËøáÂ≤îË∑ØÂè£‰∫Ü
      // ËøôÊó∂ÂÄôÂêØÂä®ÊÖ¢ÈÄüÂØªËøπÊ®°Âºè
      if (medge.width > 0.04)
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setEdgeMode(false, 0);
        mixer.setVelocity(0.2);
        state = 7400;
      }
      break;
    case 7400:
      // ÊÖ¢ÈÄüËµ∞ 1.4m ÁÑ∂ÂêéÂõûÂà∞ÂàùÂßãÁä∂ÊÄÅ
      // ÁªìÊùü
      if (pose.dist > 1.4)
      {
        state = -9;
      }
      break;

      // case 8000:
      // {
      //   UCam cam;
      //   cam.setup();

      //   cv::Mat frame = cam.getFrameRaw(); // Ëé∑ÂèñÊú™Ê†°Ê≠£ÁöÑÂéüÂßãÂõæÂÉè
      //   if (frame.empty()) {
      //     std::cerr << "Failed to capture a frame." << std::endl;
      //   }
      //   std::vector<cv::Point2f> positions = ImageProcessing(frame);
      //   if (!positions.empty()) {
      //   // Â¶ÇÊûúÊ£ÄÊµãÂà∞Ëá≥Â∞ë‰∏Ä‰∏™ÂúÜÂΩ¢ÂØπË±°ÔºåÂàôÊâìÂç∞ÊâÄÊúâÊ£ÄÊµãÂà∞ÁöÑ‰ΩçÁΩÆ
      //     for (const auto& pos : positions) {
      //       std::cout << "Position: x = " << pos.x << ", z = " << pos.y << std::endl;
      //     }
      //   }
      //   else {
      //   std::cout << "No golf balls detected." << std::endl;
      //   }
      //   break;
      // }

    default:
      // lost = true;
      break;

      /**********************************************************************************
       *
       *
       * ‰∏äÂù° ÁÑ∂Âêé‰∏ãÂù° ÊúÄÂêéËΩ¨ÂêëÂõûÊù•
       *
       *
       ***********************************************************************************/

    case 9000:
      pose.turned = 0;
      pose.dist = 0;
      ini["edge"]["kp"] = "45";
      ini["edge"]["maxturnrate"] = "7";
      ini["edge"]["lead"] = "0.3 0.2";
      mixer.setTurnrate(0);
      mixer.setVelocity(0.2);
      mixer.setEdgeMode(true, 0);
      state = 9100;
      break;

    case 9100: // ÁªèËøáÁ¨¨‰∏Ä‰∏™ËΩ¨ÂºØ

      if (pose.turned > -3 / 2)
      {

        mixer.setVelocity(0.2);
        mixer.setTurnrate(0);
        mixer.setEdgeMode(true, 0);
      }
      else
      {
        pose.dist = 0;
        pose.turned = 0;
        state = 9110;
      }

      break;

    case 9110:
      if (pose.dist < 2.5)
      {
        mixer.setTurnrate(0);
        mixer.setVelocity(0.3);
        mixer.setEdgeMode(true, 0);
      }
      else
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
        mixer.setEdgeMode(true, 0);
        state = 9200;
      }
      break;

    case 9200: // ÁªèËøáÁ¨¨‰∫å‰∏™ËΩ¨ÂºØ

      if (pose.turned > -2.5 / 2)
      {

        mixer.setVelocity(0.2);
        mixer.setTurnrate(0);
        mixer.setEdgeMode(true, -0.005);
      }

      else
      {
        pose.dist = 0;
        pose.turned = 0;
        state = 9300;
      }
      break;

    case 9300:

      if (pose.dist < 2.5)
      {

        mixer.setVelocity(0.2);
        mixer.setTurnrate(0);
        mixer.setEdgeMode(false, 0);
      }

      else
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
        state = 9400;
        // startTime = system_clock::now();
      }
      break;

    case 9400:

      if (pose.turned < 3.15)
      {

        mixer.setVelocity(0);
        mixer.setTurnrate(1);
      }

      else
      {
        pose.dist = 0;
        pose.turned = 0;
        state = 9405;
        // startTime = system_clock::now();
      }
      break;

    case 9405:
      if (pose.turned < 3.1 / 2)
      {
        mixer.setVelocity(0.3);
        mixer.setTurnrate(0);
        mixer.setEdgeMode(true, 0);
      }
      else
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
        state = 9406;
      }
      break;

    case 9406:
      if (pose.dist < 3)
      {
        mixer.setVelocity(0.3);
        mixer.setTurnrate(0);
        mixer.setEdgeMode(true, 0);
      }
      else
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
        state = 9410;
      }
      break;

    case 9410:
      mixer.setVelocity(0.2);
      mixer.setTurnrate(0);
      mixer.setEdgeMode(true, 0);
      if (medge.width > 0.05)
      {
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
        state = 9500;
      }
      break;

    case 9500:
      if (medge.width > 0.05)
      {
        cross_for_qiaoqiaoban++;
      }

      if (cross_for_qiaoqiaoban >= 5)
      {
        toLog("found crossroad for qiaoqiaoban");
        pose.dist = 0;
        pose.turned = 0;
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
        cross_for_qiaoqiaoban = 0;
        state = 9550;
      }
      break;

    case 9550:
      if (pose.dist < 0.08)
      {
        mixer.setTurnrate(0);
        mixer.setVelocity(0.1);
      }
      else
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
        state = 9600;
      }
      break;

    case 9600:
      if (pose.turned < 3.15 / 2)
      {
        mixer.setTurnrate(1);
        mixer.setVelocity(0);
      }
      else
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
        mixer.setEdgeMode(true, 0.01);
        state = 9610;
      }
      break;

    case 9610:
      if (pose.dist < 0.5)
      {
        mixer.setTurnrate(0);
        mixer.setVelocity(0.1);
        mixer.setEdgeMode(true, 0.01);
      }
      else
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
        state = 9700;
      }
      break;

    case 9700:
      mixer.setVelocity(0.1);
      mixer.setTurnrate(0);
      mixer.setEdgeMode(true, 0.01);

      if (medge.width < 0.001)
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
        state = 9705;
      }
      break;

    case 9705:
      mixer.setVelocity(0.1);
      mixer.setTurnrate(0);
      if (medge.width > 0.05)
      {
        cross_for_qiaoqiaoban++;
      }
      if (cross_for_qiaoqiaoban >= 2)
      {
        toLog("found line for qiaoqiaoban then turn 90 du");
        pose.dist = 0;
        pose.turned = 0;
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
        cross_for_qiaoqiaoban = 0;
        state = 9710;
      }

      break;

    case 9710:
      if (pose.dist < 0.07)
      {
        mixer.setTurnrate(0);
        mixer.setVelocity(0.1);
      }
      else
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
        state = 9720;
      }
      break;

    case 9720:
      if (pose.turned > -3.15 / 2)
      {
        mixer.setTurnrate(-0.7);
        mixer.setVelocity(0);
      }
      else
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
        mixer.setEdgeMode(true, 0);
        state = 9730;
      }
      break;

    case 9730:
      if (pose.dist < 0.5)
      {
        mixer.setVelocity(0.1);
        mixer.setTurnrate(0);
        mixer.setEdgeMode(true, 0);
      }
      else
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setVelocity(0.15);
        mixer.setTurnrate(0);
        state = 9735;
      }
      break;

    case 9735:
      if (pose.dist < 0.7)
      {
        mixer.setTurnrate(0);
        mixer.setVelocity(0.1);
      }
      else
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
        state = 9740;
      }
      break;

    case 9740:
      mixer.setVelocity(0.1);
      mixer.setTurnrate(0);
      if (medge.width > 0.05)
      {
        cross_for_qiaoqiaoban++;
      }
      if (cross_for_qiaoqiaoban >= 5)
      {
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
        pose.dist = 0;
        pose.turned = 0;
        cross_for_qiaoqiaoban = 0;
        state = 9750;
      }
      break;

    case 9750:
      if (pose.dist < 0.08)
      {
        mixer.setTurnrate(0);
        mixer.setVelocity(0.1);
      }
      else
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
        state = 9760;
      }
      break;

    case 9760:
      if (pose.turned < 3.15 / 2)
      {
        mixer.setTurnrate(1);
        mixer.setVelocity(0);
      }
      else
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
        mixer.setEdgeMode(true, 0);
        state = 9770;
      }
      break;

    // ‰ªéË∑∑Ë∑∑Êùø‰∏ãÊù•Âà∞ÁªàÁÇπ
    case 9770:
      mixer.setVelocity(0.2);
      mixer.setTurnrate(0);
      mixer.setEdgeMode(true, 0);
      if (pose.turned > 3.05 / 2) // ËΩ¨Ëßí90Â∫¶
      {
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
        pose.dist = 0;
        pose.turned = 0;
        state = 9780;
      }
      break;

    case 9780:
      mixer.setTurnrate(0);
      mixer.setVelocity(0.4);
      mixer.setEdgeMode(true, 0);
      break;

    case 3000: // ‰∏äÊñúÂù° ‰∏ãÊ•ºÊ¢Ø
      mixer.setVelocity(0.2);
      mixer.setTurnrate(0);
      mixer.setEdgeMode(true, 0);
      if (pose.turned < -3.05 / 2) // ËΩ¨Ëßí90Â∫¶
      {
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
        pose.dist = 0;
        pose.turned = 0;
        state = 3100;
      }
      break;

    case 3100:             //
      if (pose.dist < 0.2) // ÁªßÁª≠Âæ™Ëøπ0.2m
      {
        mixer.setTurnrate(0);
        mixer.setVelocity(0.1);
        mixer.setEdgeMode(true, 0);
      }
      else
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
        state = 3110;
      }
      break;

    case 3110:                     // Ê£ÄÊµãËΩ¨ÂºØ
      if (pose.turned > -3.14 / 2) // Âè≥Êãê90¬∞
      {                            // ÂéüÂú∞Âè≥Êãê90¬∞
        mixer.setTurnrate(-1);
        mixer.setVelocity(0);
      }
      else
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
        state = 3200;
      }
      break;

    case 3200:

      if (pose.dist < 0.2) // Ëµ∞0.2m Ë∂ÖËøáÂàÜÂèâË∑ØÂå∫Âüü
      {
        mixer.setTurnrate(0);
        mixer.setVelocity(0.2);
      }
      else
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
        state = 3300;
      }

      break;

    case 3300:
      if (pose.dist < 2.1) // Ëæπ‰∏ãÊ•ºÊ¢ØËæπÂæ™Ëøπ
      {
        mixer.setVelocity(0.1);
        mixer.setTurnrate(0);
        mixer.setEdgeMode(false, 0);
      }
      else
      {
        pose.dist = 0;
        pose.turned = 0;
        mixer.setVelocity(0);
        mixer.setTurnrate(0);
        state = 3400;
      }
      break;

    case 3400:
      if (pose.dist < 0.55)
      { // ‰∏ãÂÆåÊ•ºÊ¢ØÔºåÁªßÁª≠ÊÖ¢ÈÄüÂâçËøõ
        mixer.setTurnrate(0);
        mixer.setVelocity(0.1);
      }
      else
      {

        pose.dist = 0;
        pose.turned = 0;
        state = 3500;
      }
      break;

    case 3500:
      if (pose.turned > -3.14 / 2)
      { // Ê≠£Âú®ÂêëÂè≥ËΩ¨90Â∫¶
        // ËøôÈáå‰∏çÈúÄË¶ÅÂÜçÊ¨°ËÆæÁΩÆturnrateÔºåÂõ†‰∏∫Â∑≤ÁªèÂú®ËΩ¨Âêë‰∏≠
        mixer.setVelocity(0); // ÂÅúËΩ¶
        mixer.setTurnrate(-1);
      }
      else
      {
        mixer.setTurnrate(0); // ÂÅúÊ≠¢ËΩ¨Âêë
        mixer.setVelocity(0); // ÂÆåÊàêÂè≥ËΩ¨ÂêéÂºÄÂßãÁõ¥Ë°åÔºåÂØªÊâæ‰∏ã‰∏ÄÊù°Á∫ø
        pose.dist = 0;
        pose.turned = 0;
        state = 3550; // ËøõÂÖ•‰∏ã‰∏Ä‰∏™Áä∂ÊÄÅÔºåÁõ¥Ë°åÂØªÊâæ‰∏ã‰∏ÄÊù°Á∫ø
      }
      break;

    case 3550:
      if (pose.dist < 0.55)
      {
        mixer.setTurnrate(0);
        mixer.setVelocity(0.2);
      }
      else
      {
        mixer.setTurnrate(0);
        mixer.setVelocity(0);
        pose.dist = 0;
        pose.turned = 0;
        state = 3600;
      }
      break;

    case 3600:
      //
      if (medge.width > 0.02)
      {                       // ÂÅáËÆæÂÆΩÂ∫¶Â§ß‰∫é0.02‰∏∫Ê£ÄÊµãÂà∞Êñ∞ÁöÑÁ∫ø
        mixer.setVelocity(0); // ÂÅúËΩ¶ÔºåÂáÜÂ§áÂ∑¶ËΩ¨
        state = 3700;         // ËΩ¨Âêë‰∏ã‰∏Ä‰∏™Áä∂ÊÄÅËøõË°åÂ∑¶ËΩ¨
      }
      break;

    case 3700:
      if (pose.turned < 3.14 / 2)
      {
        mixer.setTurnrate(1); // ÂºÄÂßãÂéüÂú∞ÂêëÂ∑¶ËΩ¨
      }
      else
      {
        mixer.setTurnrate(0);   // ÂÅúÊ≠¢ËΩ¨Âêë
        mixer.setVelocity(0.2); // ÂÆåÊàêÂ∑¶ËΩ¨ÂêéÔºåÊ≤øÁùÄÊñ∞Á∫øÁõ¥Ë°å
        pose.dist = 0;
        pose.turned = 0;
        state = 3800;
      }
      break;

    case 3800:
      // ÁªßÁª≠Ê≤øÁùÄÁ∫øÂæ™ËøπÔºåÊ£ÄÊµãÂâçÊñπÊòØÂê¶ÊúâÁâ©‰Ωì
      if (pose.dist < 1)
      { //
        mixer.setEdgeMode(true, 0);
        mixer.setVelocity(0.2); // Ê£ÄÊµãÂà∞ÂâçÊñπÊúâÁâ©‰ΩìÔºåÂÅú‰∏ãÊù•
                                // Ê†πÊçÆÈúÄË¶ÅËøõË°åÂêéÁª≠Êìç‰ΩúÔºå‰æãÂ¶ÇËΩ¨Êç¢Áä∂ÊÄÅÊàñÂÆåÊàê‰ªªÂä°
      }
      else
      {
        mixer.setTurnrate(0);
        mixer.setVelocity(0);
      }
      break;
    }
    if (state != oldstate)
    { // C-type string print
      snprintf(s, MSL, "State change from %d to %d", oldstate, state);
      toLog(s);
      oldstate = state;
      t.now();
    }
    // wait a bit to offload CPU (4000 = 4ms)
    usleep(4000);
  }
  if (lost)
  { // there may be better options, but for now - stop
    toLog("Plan21 got lost");
    mixer.setVelocity(0);
    mixer.setTurnrate(0);
  }
  else
    toLog("Plan21 finished");
}

void BPlan21::terminate()
{ // just close logfile
  if (logfile != nullptr)
    fclose(logfile);
  logfile = nullptr;
}

void BPlan21::toLog(const char *message)
{
  UTime t("now");
  if (logfile != nullptr)
  {
    fprintf(logfile, "%lu.%04ld %d %% %s\n", t.getSec(), t.getMicrosec() / 100,
            oldstate,
            message);
  }
  if (toConsole)
  {
    printf("%lu.%04ld %d %% %s\n", t.getSec(), t.getMicrosec() / 100,
           oldstate,
           message);
  }
}
